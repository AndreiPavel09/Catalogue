<!-- FrontendAdmin/Pages/Admin/ManageStudents.razor -->
@page "/admin/students"
@inject IAdminApiService AdminService
@inject NavigationManager NavigationManager

@using Frontend.DTOs
@using Frontend.Services

<h3>Manage Students</h3>

@if (isLoading)
{
    <p><em>Loading students...</em></p>
}
else if (!string.IsNullOrEmpty(loadErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @loadErrorMessage
    </div>
}
else
{
    <h4>Add New Student</h4>
    <EditForm Model="@newStudent" OnValidSubmit="@HandleAddStudent" FormName="addStudentForm">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label for="username" class="form-label">Username:</label>
            <InputText id="username" @bind-Value="newStudent.Username" class="form-control" />
            <ValidationMessage For="@(() => newStudent.Username)" />
        </div>
        <div class="mb-3">
            <label for="firstname" class="form-label">First Name:</label>
            <InputText id="firstname" @bind-Value="newStudent.FirstName" class="form-control" />
            <ValidationMessage For="@(() => newStudent.FirstName)" />
        </div>
        <div class="mb-3">
            <label for="lastname" class="form-label">Last Name:</label>
            <InputText id="lastname" @bind-Value="newStudent.LastName" class="form-control" />
            <ValidationMessage For="@(() => newStudent.LastName)" />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password:</label>
            <InputText type="password" id="password" @bind-Value="newStudent.Password" class="form-control" />
            <ValidationMessage For="@(() => newStudent.Password)" />
        </div>

        @* Role is set in code, no input needed here *@
        @* <InputText type="hidden" @bind-Value="newStudent.Role" /> *@

        <ValidationSummary class="mt-2" />

        <button type="submit" class="btn btn-primary mt-2" disabled="@isSubmitting">
            @if (isSubmitting)
            {
                <span class="spinner-border spinner-border-sm"></span>
            }
            Add Student
        </button>
        @if (!string.IsNullOrEmpty(addStudentError))
        {
            <div class="alert alert-danger mt-2" role="alert">@addStudentError</div>
        }
    </EditForm>

    <hr class="my-4" />

    <h4>Existing Students</h4>
    @if (students == null || !students.Any())
    {
        <p>No students found.</p>
    }
    else
    {
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Username</th>
                    <th>Full Name</th>
                    <th>Role</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var student in students)
                {
                    <tr>
                        <td>@student.Id</td>
                        <td>@student.Username</td>
                        <td>@student.FullName</td>
                        <td>@student.Role</td>
                        <td>
                            <button class="btn btn-sm btn-danger" @onclick="() => HandleDeleteStudent(student.Id)" disabled="@(isDeleting && studentToDeleteId == student.Id)">
                                @if (isDeleting && studentToDeleteId == student.Id)
                                {
                                    <span class="spinner-border spinner-border-sm"></span>
                                }
                                else
                                {
                                    <span>Delete</span>
                                }
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (!string.IsNullOrEmpty(deleteStudentError))
        {
            <div class="alert alert-danger mt-2" role="alert">@deleteStudentError</div>
        }
    }
}


@code {
    private List<UserDto>? students;
    private CreateUserDto newStudent = new CreateUserDto { Role = "Student" }; // Pre-set role for the form model
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool isDeleting = false;
    private int? studentToDeleteId = null;
    private string? loadErrorMessage;
    private string? addStudentError;
    private string? deleteStudentError;

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
    }

    private async Task LoadStudents()
    {
        isLoading = true;
        loadErrorMessage = null;
        addStudentError = null; // Clear errors on reload
        deleteStudentError = null;
        StateHasChanged();

        try
        {
            students = await AdminService.GetStudentsAsync(); // Use the existing method
            if (students == null)
            {
                loadErrorMessage = "Failed to load students. Check API connection.";
            }
        }
        catch (Exception ex)
        {
            loadErrorMessage = $"An error occurred loading students: {ex.Message}";
            Console.WriteLine($"Error in LoadStudents: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleAddStudent()
    {
        isSubmitting = true;
        addStudentError = null;
        StateHasChanged();

        try
        {
            // Ensure Role is set correctly just before sending
            newStudent.Role = "Student";

            var createdStudent = await AdminService.AddStudentAsync(newStudent);
            if (createdStudent != null)
            {
                newStudent = new CreateUserDto { Role = "Student" }; // Reset form
                await LoadStudents(); // Refresh list
                StateHasChanged();
            }
            else
            {
                addStudentError = "Failed to add student. Username might exist or API error occurred.";
            }
        }
        catch (Exception ex)
        {
            addStudentError = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Error in HandleAddStudent: {ex}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task HandleDeleteStudent(int studentId)
    {
        isDeleting = true;
        studentToDeleteId = studentId;
        deleteStudentError = null;
        StateHasChanged();

        try
        {
            var (success, errorMessage) = await AdminService.DeleteStudentAsync(studentId);
            if (success)
            {
                await LoadStudents(); // Refresh list
                StateHasChanged();
            }
            else
            {
                // Display the specific error message from the service
                deleteStudentError = errorMessage ?? "Failed to delete student. An unknown error occurred.";
                // This message might include "cannot delete because of grades/enrollments" based on backend logic
            }
        }
        catch (Exception ex)
        {
            deleteStudentError = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Error in HandleDeleteStudent for ID {studentId}: {ex}");
        }
        finally
        {
            isDeleting = false;
            studentToDeleteId = null;
            StateHasChanged();
        }
    }
}