@using FrontEnd.DTOs
@using FrontEnd.Services
@inject AdminApiClient ApiClient
@inject NavigationManager NavigationManager

@rendermode InteractiveWebAssembly

<h3>TeacherManagement</h3>

@if (isLoading)
{
    <p><em>Loading teachers...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <h4>Add New Teacher</h4>
    <EditForm Model="newTeacher" OnValidSubmit="HandleAddTeacherAsync" FormName="AddTeacherForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="teacherUsername" class="form-label">Username:</label>
            <InputText id="teacherUsername" @bind-Value="newTeacher.Username" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="teacherPassword" class="form-label">Password:</label>
            <InputText type="password" id="teacherPassword" @bind-Value="newTeacher.Password" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="teacherFirstName" class="form-label">First Name:</label>
            <InputText id="teacherFirstName" @bind-Value="newTeacher.FirstName" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="teacherLastName" class="form-label">Last Name:</label>
            <InputText id="teacherLastName" @bind-Value="newTeacher.LastName" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">@(isSubmitting ? "Adding..." : "Add Teacher")</button>
    </EditForm>

    <hr />

    <h4>Existing Teachers</h4>
    @if (teachers == null || !teachers.Any())
    {
        <p>No teachers found.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Username</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var teacher in teachers)
                {
                    <tr>
                        <td>@teacher.Id</td>
                        <td>@teacher.Username</td>
                        <td>@teacher.FirstName</td>
                        <td>@teacher.LastName</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => HandleDeleteTeacherAsync(teacher.Id)" disabled="@isSubmitting">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<UserDto>? teachers;
    private CreateUserDto newTeacher = new() { Role = "Teacher" }; // Set role
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadTeachersAsync();
    }

    private async Task LoadTeachersAsync()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            teachers = await ApiClient.GetTeachersAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading teachers: {ex.Message}";
            Console.WriteLine(ex); // Log the full error
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Notify Blazor UI needs to re-render
        }
    }

    private async Task HandleAddTeacherAsync()
    {
        isSubmitting = true;
        errorMessage = null;
        try
        {
            newTeacher.Role = "Teacher"; // Ensure role is set
            var response = await ApiClient.AddTeacherAsync(newTeacher);

            if (response.IsSuccessStatusCode)
            {
                newTeacher = new() { Role = "Teacher" }; // Reset form
                await LoadTeachersAsync(); // Refresh list
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error adding teacher: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding teacher: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task HandleDeleteTeacherAsync(int teacherId)
    {
        // Optional: Add confirmation dialog here

        isSubmitting = true; // Prevent multiple clicks
        errorMessage = null;
        try
        {
            var response = await ApiClient.DeleteTeacherAsync(teacherId);

            if (response.IsSuccessStatusCode)
            {
                await LoadTeachersAsync(); // Refresh list
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error deleting teacher: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting teacher: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}